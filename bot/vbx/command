#!/bin/bash

########################################################################
# Copyright 2016 vbextreme <vbextreme.vbextreme@gmail.com>             #
#                                                                      #
# This program is free software; you can redistribute it and/or modify #
# it under the terms of the GNU General Public License as published by #
# the Free Software Foundation; either version 2 of the License, or    #
# (at your option) any later version.                                  #
#                                                                      #
# This program is distributed in the hope that it will be useful,      #
# but WITHOUT ANY WARRANTY; without even the implied warranty of       #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the        #
# GNU General Public License for more details.                         #
#                                                                      #
# You should have received a copy of the GNU General Public License    #
# along with this program; if not, write to the Free Software          #
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,           #
# MA 02110-1301, USA.                                                  #
#                                                                      #
########################################################################

##############
### GLOBAL ###
##############

FILE_LOG="$BOT_PREFIX/$BOT_NAME/bot.log"
DATABASE_LINK="$BOT_PREFIX/$BOT_NAME/link.db"
DATABASE_ENABLED="$BOT_PREFIX/$BOT_NAME/enabled.db"
DATABASE_ABUSE="$BOT_PREFIX/$BOT_NAME/abuse.db"

#####################
### HELP FUNCTION ###
#####################

#log $1(info, warning, error,exec) $2 message
function log(){
	dt=$(date)
	echo "[$dt ++ ${CHAT[USERNAME]} ++ ${USER[USERNAME]} ++ ${USER[ID]}] $1: $2" >> $FILE_LOG
}	

#####################
### DATABASE LINK ###
#####################

function db_link_create(){
	if [ ! -f "$DATABASE_LINK" ]; then
		local QUERY="CREATE TABLE tblLink (id INTEGER PRIMARY KEY, bookgroup TEXT, name TEXT, link TEXT);"
		echo "$QUERY" | sqlite3 "$DATABASE_LINK"
		log "info" "new database $DATABASE_LINK"
	fi
}

function db_link_tblLink_insert(){
	local GROUP=$(echo -n "$1" | base64 | tr '\n' '#')
	local NAME=$(echo -n "$2" | base64 | tr '\n' '#')
	local LINK=$(echo -n "$3" | base64 | tr '\n' '#')
	local QUERY="INSERT INTO tblLink (bookgroup,name,link) VALUES ('$GROUP','$NAME','$LINK');"
	sqlite3 "$DATABASE_LINK" "$QUERY"
}

function db_link_tblLink_delete(){
	local GROUP=$(echo -n "$1" | base64 | tr '\n' '#')
	local NAME=$(echo -n "$2" | base64 | tr '\n' '#')
	local LINK=$(echo -n "$3" | base64 | tr '\n' '#')
	local QUERY="DELETE FROM tblLink WHERE bookgroup = '$GROUP' AND name = '$NAME' AND link = '$LINK';"
	sqlite3 "$DATABASE_LINK" "$QUERY"
}

function db_link_tblLink(){
	local GROUP=$(echo -n "$1" | base64 | tr '\n' '#')
	local NAME=$(echo -n "$2" | base64 | tr '\n' '#')
	local QUERY="SELECT * FROM tblLink WHERE bookgroup = '$GROUP' AND name = '$NAME';"
	DB_RET=$(sqlite3 "$DATABASE_LINK" "$QUERY" | cut -f4 -d\| )
	
	if [[ $DB_RET == "" ]]; then
		send_normal_message "${CHAT[ID]}" "\$ no data"
	else
		local DSP=""
		while read -r line; do
			line=$(echo "$line" | tr '#' '\n' | base64 -d)
			DSP="$DSP:bookmark: $line\n"
		done <<< "$DB_RET"
		send_markdown_message "${CHAT[ID]}" "$DSP"
	fi
}

function db_link_tblLink_group(){
	local QUERY="SELECT * FROM tblLink GROUP BY bookgroup;"
	DB_RET=$(sqlite3 "$DATABASE_LINK" "$QUERY" | cut -f2 -d\| )
	
	if [[ $DB_RET == "" ]]; then
		send_normal_message "${CHAT[ID]}" "\$ no data"
	else
		local DSP=""
		while read -r line; do
			line=$(echo "$line" | tr '#' '\n' | base64 -d)
			DSP="$DSP:mag_right: $line\n"
		done <<< "$DB_RET"
		send_markdown_message "${CHAT[ID]}" "$DSP"
	fi
}

function db_link_tblLink_name(){
	local GROUP=$(echo -n "$1" | base64 | tr '\n' '#')
	local QUERY="SELECT * FROM tblLink WHERE bookgroup = '$GROUP' GROUP BY name;"
	DB_RET=$(sqlite3 "$DATABASE_LINK" "$QUERY" | cut -f3 -d\| )
	
	if [[ $DB_RET == "" ]]; then
		send_normal_message "${CHAT[ID]}" "\$ no data"
	else
		local DSP=""
		while read -r line; do
			line=$(echo "$line" | tr '#' '\n' | base64 -d)
			DSP="$DSP:mag_right: $line\n"
		done <<< "$DB_RET"
		send_markdown_message "${CHAT[ID]}" "$DSP"
	fi
}

########################
### DATABASE ENABLED ###
########################

function db_enabled_create(){
	if [ ! -f "$DATABASE_ENABLED" ]; then
		local QUERY="CREATE TABLE tblEnabled (id INTEGER PRIMARY KEY, chanID TEXT, chanName TEXT, status TEXT);"
		echo "$QUERY" | sqlite3 "$DATABASE_ENABLED"
		log "info" "new database $DATABASE_ENABLED"
		return 1
	fi
	return 0
}

function db_enabled_tblEnabled_insert(){
	log "info" "enabled insert"
	
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local CHANNAME=""
	if [[ "$2" == "" ]]; then
		CHANNAME="private"
	else
		CHANNAME=$(echo -n "$2" | base64 | tr '\n' '#')
	fi
	local STATUS=$(echo -n "$3" | base64 | tr '\n' '#')
	local QUERY="INSERT INTO tblEnabled (chanID,chanName,status) VALUES ('$CHANID','$CHANNAME','$STATUS');"
	sqlite3 "$DATABASE_ENABLED" "$QUERY"
}

function db_enabled_tblEnabled_update(){
	log "info" "enabled update"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local STATUS=$(echo -n "$2" | base64 | tr '\n' '#')
	local QUERY="UPDATE tblEnabled SET status = '$STATUS' WHERE chanID = '$CHANID';"
	sqlite3 "$DATABASE_ENABLED" "$QUERY"
}

function db_enabled_tblEnabled_delete(){
	log "info" "enabled delete"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local QUERY="DELETE FROM tblEnabled WHERE chanID = '$CHANID';"
	sqlite3 "$DATABASE_ENABLED" "$QUERY"
}

function db_enabled_tblEnabled(){
	log "info" "enabled search"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local QUERY="SELECT * FROM tblEnabled WHERE chanID = '$CHANID';"
	DB_RET=$(sqlite3 $DATABASE_ENABLED "$QUERY" | cut -f4 -d\| )
	if [[ "$DB_RET" != "" ]]; then
		DB_RET=$(echo "$DB_RET" | base64 -d)
		if [[ "$DB_RET" == "enabled" ]]; then
			return 2
		else
			return 1
		fi
	fi
	return 0
}

######################
### DATABASE ABUSE ###
######################

function db_abuse_create(){
	if [ ! -f "$DATABASE_ABUSE" ]; then
		local QUERY="CREATE TABLE tblAbuse (id INTEGER PRIMARY KEY, chanID TEXT, userID TEXT, userName TEXT);"
		echo "$QUERY" | sqlite3 "$DATABASE_ABUSE"
		log "info" "new database $DATABASE_ABUSE"
		db_abuse_tblAbuse_insert "000" "000" "000"
	fi
}

function db_abuse_tblAbuse_insert(){
	log "info" "abuse insert"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local USERID=$(echo -n "$3" | base64 | tr '\n' '#')
	local USERNAME=$(echo -n "$4" | base64 | tr '\n' '#')
	local QUERY="INSERT INTO tblAbuse (chanID,userID,userName) VALUES ('$CHANID','$USERID','$USERNAME');"
	sqlite3 "$DATABASE_ABUSE" "$QUERY"
}

function db_abuse_tblAbuse_delete(){
	log "info" "abuse delete"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local USERNAME=$(echo -n "$3" | base64 | tr '\n' '#')
	local QUERY="DELETE FROM tblAbuse WHERE chanID = '$CHANID' AND userName = '$USERNAME';"
	sqlite3 "$DATABASE_ABUSE" "$QUERY"
}

function db_abuse_tblAbuse_userid(){
	log "info" "abuse search user id"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local USERNAME=$(echo -n "$2" | base64 | tr '\n' '#')
	local QUERY="SELECT * FROM tblAbuse WHERE chanID = '$CHANID' AND userName = '$USERNAME';"
	DB_RET=$(sqlite3 "$DATABASE_ABUSE" "$QUERY" | cut -f3 -d\| )
}

function db_abuse_tblAbuse(){
	log "info" "abuse search"
	local CHANID=$(echo -n "$1" | base64 | tr '\n' '#')
	local USERID=$(echo -n "$2" | base64 | tr '\n' '#')
	local QUERY="SELECT * FROM tblAbuse WHERE chanID = '$CHANID' AND userID = '$USERID';"
	DB_RET=$(sqlite3 "$DATABASE_ABUSE" "$QUERY" | cut -f3 -d\| )
	if [[ "$DB_RET" == "" ]]; then
		return 0
	fi
	return 1
}

##################################
### FUNCTION FOR PARSE COMMAND ###
##################################

function special_command_creator(){
	local CMD=$(echo "$MESSAGE" | cut -f2 -d\  )
	
	case $CMD in
		'chan')
			local argChanID=$( echo $MESSAGE | cut -f3 -d\ )
			local argChanName=$( echo $MESSAGE | cut -f4 -d\ )
			local argStatus=$( echo $MESSAGE | cut -f5 -d\ )
			if [[ "$argChanID" == "" || "$argChanName" == "" || "$argStatus" == "" ]]; then
				log "error" "\$ chan chatid::${CHAT[ID]} message::$MESSAGE"
				send_normal_message "${CHAT[ID]}" "\$ usage: \$ chan <chanID> <chanName> <status>"
				return 0
			fi
			log "exec" "\$ chan chatid::$argChanID chatName::$argChatName status::$argStatus"
			db_enabled_tblEnabled "$argChanID"
			if [[ $? == 0 ]]; then
				db_enabled_tblEnabled_insert "$argChanID" "$argChanName" "$argStatus"
			elif [[ $? == 1 || $? == 2 ]]; then
				db_enabled_tblEnabled_update "$argChanID" "$argStatus"
			fi
			
			send_normal_message "${CHAT[ID]}" "\$ $argChanName $argStatus"
		;;
		
		'abuse')
			if [[ "${MESSAGE[FROM_ID]}" == "" ]]; then
				log "error" "\$ abuse no from_id, chatid::${CHAT[ID]} from_id::${MESSAGE[FROM_ID]} from_username::${MESSAGE[FROM_USERNAME]}"
				send_normal_message "${CHAT[ID]}" "\$ invalid id, usage: quote message and \$ abuse"
				return 0
			fi
			log "exec" "\$ abuse chatid::${CHAT[ID]} userName::${MESSAGE[FROM_USERNAME]}"
			db_abuse_tblAbuse "${CHAT[ID]}" "${MESSAGE[FROM_ID]}"
			
			if [[ "${MESSAGE[FROM_USERNAME]}" == "" ]]; then
				MESSAGE[FROM_USERNAME]="private"
			fi
			 
			if [[ $? == 0 ]]; then
				db_abuse_tblAbuse_insert "${CHAT[ID]}" "${MESSAGE[FROM_ID]}" "${MESSAGE[FROM_USERNAME]}"
			fi
			kick_chat_member "${CHAT[ID]}" "${MESSAGE[FROM_ID]}"
			send_normal_message "${CHAT[ID]}" "\$ ban ${MESSAGE[FROM_USERNAME]}"
		;;
		
		'solve')
			local argName=$( echo $MESSAGE | cut -f3 -d\ )
			if [[ "$argName" == "" ]]; then
				log "error" "\$ solve chatid::${CHAT[ID]} message::$MESSAGE"
				send_normal_message "${CHAT[ID]}" "\$ usage: \$ solve <username>"
				return 0
			fi
			log "exec" "\$ solve chatid::${CHAT[ID]} userName::$argName"
			db_abuse_tblAbuse_userid "${CHAT[ID]}" "$argName"
			if [[ "$DB_RET" != "" ]]; then
				local UI=$DB_RET
				db_abuse_tblAbuse "${CHAT[ID]}" "$UI"
				if [[ $? == 1 ]]; then
					db_abuse_tblAbuse_delete "${CHAT[ID]}" "$argName"
				fi
				unban_chat_member "${CHAT[ID]}" "$UI"
			fi
			send_normal_message "${CHAT[ID]}" "\$ solve $argName"
		;;
		
		'link.add')
			local argGroup=$( echo $MESSAGE | cut -f3 -d\ )
			local argName=$( echo $MESSAGE | cut -f4 -d\ )
			local argLink=$( echo $MESSAGE | cut -f5 -d\ )
			if [[ "$argGroup" == "" || "$argName" == "" || "$argLink" == "" ]]; then
				log "error" "\$ link.add chatid::${CHAT[ID]} message::$MESSAGE"
				send_normal_message "${CHAT[ID]}" "\$ usage: \$ link.add <group> <name> <link>"
				return 0
			fi
			log "exec" "\$ link.add chatid::${CHAT[ID]} grp::$argGroup name::$argName link::$argLink"
			db_link_tblLink_insert "$argGroup" "$argName" "$argLink"
			send_normal_message "${CHAT[ID]}" "\$ new link available"
		;;
		'link.delete')
			local argGroup=$( echo $MESSAGE | cut -f3 -d\ )
			local argName=$( echo $MESSAGE | cut -f4 -d\ )
			local argLink=$( echo $MESSAGE | cut -f5 -d\ )
			if [[ "$argGroup" == "" || "$argName" == "" || "$argLink" == "" ]]; then
				log "error" "\$ link.delete chatid::${CHAT[ID]} message::$MESSAGE"
				send_normal_message "${CHAT[ID]}" "\$ usage: \$ link.delete <group> <name> <link>"
				return 0
			fi
			log "exec" "\$ link.delete chatid::${CHAT[ID]} grp::$argGroup name::$argName link::$argLink"
			db_link_tblLink_delete "$argGroup" "$argName" "$argLink"
			send_normal_message "${CHAT[ID]}" "\$ if have data I have delete"
		;;
		
		'update')
			log "exec" "\$ update chatid::${CHAT[ID]} userid::${USER[ID]}"
			send_normal_message "${CHAT[ID]}" "\$ start update ..."
			cd ..
			git pull > /dev/null
			cd ./core
			send_normal_message "${CHAT[ID]}" "\$ update complete"
			CMD=$(echo "$MESSAGE" | cut -f3 -d\  )
			if [[ "$CMD" == "reboot" ]]; then
				nohup ./bashbot.sh -b "$BOT_NAME" &
				send_normal_message "${CHAT[ID]}" "\$ reboot"
				kill $CORE_PID
				exit 0
			fi
		;;
		
		'ping')
			log "exec" "\$ ping chatid::${CHAT[ID]} userid::${USER[ID]}"
			send_normal_message "${CHAT[ID]}" "pong"
		;;
		
		'info')
			log "exec" "\$ info chatid::${CHAT[ID]} userid::${USER[ID]}"
			send_normal_message "${CHAT[ID]}" "\$ from ID::${MESSAGE[FROM_ID]} from UserName::${MESSAGE[FROM_USERNAME]}"
		;;
		
		'log')
			log "exec" "\$ log chatid::${CHAT[ID]} userid::${USER[ID]}"
			local RP=$(cat $FILE_LOG | tail -n 10)
			send_normal_message "${CHAT[ID]}" "$RP"
		;;
		
		'rmlog')
			rm FILE_LOG
			log "exec" "\$ rmlog chatid::${CHAT[ID]} userid::${USER[ID]}"
			send_normal_message "${CHAT[ID]}" "\$ log delete"
		;;
	esac
}

function special_command_admin(){
	local CMD=$(echo "$MESSAGE" | cut -f2 -d\  )
	
	case $CMD in
		'ping')
			log "exec" "\$ ping chatid::${CHAT[ID]} userid::${USER[ID]}"
			send_normal_message "${CHAT[ID]}" "pong"
		;;		
		*)
			log "warning" "unavailable \$ message::'$MESSAGE'"
		;;
	esac
}

function special_command(){
	db_enabled_tblEnabled "${CHAT[ID]}"
	if [[ $? != 2 ]]; then
		if [[ $? == 0 ]]; then
			db_enabled_tblEnabled_insert "${CHAT[ID]}" "${CHAT[USERNAME]}" "disabled"
		fi
		log "error" "chan not enabled"
		return 0
	fi
	
	get_chat_member "${CHAT[ID]}" "${USER[ID]}"
	
	if [[ "${CHATMEMBER[OK]}" != "true" ]]; then
		log "error" "special_command invalid CHATMEMBER"
		return 0
	fi
	
	if [[ "${CHATMEMBER[STATUS]}" == "creator" ]]; then
		special_command_creator
		return 0
	fi
	
	if [[ "${CHATMEMBER[STATUS]}" == "administrator" ]]; then
		special_command_admin
		return 0
	fi
	
	log "error" "special_command can't execute from member message::$MESSAGE"
}

function chan_command_mod(){
	local CMD=$(echo $MESSAGE | cut -f1 -d\  )
	
	case $CMD in
			'/start')
				#echo "start"
				log "exec" "/start"
				db_link_create
				db_abuse_create
				db_enabled_create
				if [[ $? == 1 ]]; then
					db_enabled_tblEnabled_insert "${CHAT[ID]}" "${CHAT[USERNAME]}" "enabled"
					send_normal_message "${CHAT[ID]}" "\$ chan init"
				fi
				send_normal_message "${CHAT[ID]}" "\$ start"
			;;			
			
			'/info')
				log "exec" "/info"
				send_normal_message "${CHAT[ID]}" "\$ chaID::${CHAT[ID]} chatName::${CHAT[USERNAME]} fromID::${MESSAGE[FROM_ID]} fromUserName::${MESSAGE[FROM_USERNAME]}"
			;;
			
			'/ban')
				log "exec" "/ban chatid::${CHAT[ID]} fromID::${MESSAGE[FROM_ID]} username::${MESSAGE[FROM_USERNAME]}"
				kick_chat_member "${CHAT[ID]}" "${MESSAGE[FROM_ID]}"
				send_normal_message "${CHAT[ID]}" "\$ ban ${MESSAGE[FROM_USERNAME]}"
			;;
				
			'/kick')
				log "exec" "/kick chatid::${CHAT[ID]} userid::${MESSAGE[FROM_ID]} username::${MESSAGE[FROM_USERNAME]}"
				kick_chat_member "${CHAT[ID]}" "${MESSAGE[FROM_ID]}"
				unban_chat_member "${CHAT[ID]}" "${MESSAGE[FROM_ID]}"
				send_normal_message "${CHAT[ID]}" "\$ kick ${MESSAGE[FROM_USERNAME]}"
			;;
			
			'/link')
				log "exec" "/link"
				local argGroup=$( echo $MESSAGE | cut -f2 -d\ )
				local argName=$( echo $MESSAGE | cut -f3 -d\ )
				if [[ "$argName" == "" || "$argName" == "/link" ]]; then
					if [[ "$argGroup" == "" || "$argGroup" == "/link" ]]; then
						log "exec" "/link group chatid::${CHAT[ID]} grp::$argGroup name::$argName"
						db_link_tblLink_group
					else
						log "exec" "/link chatid::${CHAT[ID]} grp::$argGroup name::$argName"
						db_link_tblLink_name "$argGroup"
					fi
				else
					log "exec" "/link chatid::${CHAT[ID]} grp::$argGroup name::$argName"
					db_link_tblLink "$argGroup" "$argName"
				fi
			;;
		
			*)
				log "warning" "unavailable admin / message::'$MESSAGE'"
			;;
	esac
}

function chan_command_member(){
	#echo "cmd member"
	
	local CMD=$(echo $MESSAGE | cut -f1 -d\  )
	
	case $CMD in
		'/part'|'/suicide'|'/suicidegirls')
			log "exec" "/part chatid::${CHAT[ID]} userid::${USER[ID]}"
			kick_chat_member "${CHAT[ID]}" "${USER[ID]}"
			unban_chat_member "${CHAT[ID]}" "${USER[ID]}"
			send_normal_message "${CHAT[ID]}" "\$ kick ${USER[USERNAME]}"
		;;
		
		'/link')
			log "exec" "/link"
			local argGroup=$( echo $MESSAGE | cut -f2 -d\ )
			local argName=$( echo $MESSAGE | cut -f3 -d\ )
			if [[ "$argName" == "" || "$argName" == "/link" ]]; then
				if [[ "$argGroup" == "" || "$argGroup" == "/link" ]]; then
					log "exec" "/link group chatid::${CHAT[ID]} grp::$argGroup name::$argName"
					db_link_tblLink_group
				else
					log "exec" "/link chatid::${CHAT[ID]} grp::$argGroup name::$argName"
					db_link_tblLink_name "$argGroup"
				fi
			else
				log "exec" "/link chatid::${CHAT[ID]} grp::$argGroup name::$argName"
				db_link_tblLink "$argGroup" "$argName"
			fi
		;;
		
		*)
			log "warning" "unavailable user / message::'$MESSAGE'"
		;;
	esac
}

function chan_command(){		
	get_chat_member "${CHAT[ID]}" "${USER[ID]}"
	
	if [[ "${CHATMEMBER[STATUS]}" == creator || "${CHATMEMBER[STATUS]}" == administrator ]]; then
		chan_command_mod
		return 0
	elif [[ "${CHATMEMBER[STATUS]}" == member ]]; then
		chan_command_member
		return 0
	fi
	
	#echo "fail member"
	log "error" "chan_command can't execute from member message::$MESSAGE"
}

################
### BOT EXEC ###
################

#if [[ -f "$DATABASE_ABUSE" ]]; then
#	db_abuse_tblAbuse "${CHAT[ID]}" "${USER[ID]}"
#	if [[ $? == 1 ]]; then
#		log "exec" "abuse ban chatid::${CHAT[ID]} userid::${USER[ID]}"
#		kick_chat_member "${CHAT[ID]}" "${USER[ID]}"
#		send_normal_message "${CHAT[ID]}" "\$ ban ${USER[USERNAME]}"
#	fi
#fi

if [[ ${MESSAGE:0:1} == "$"  ]]; then
	special_command
elif [[ ${MESSAGE:0:1} == "/" ]]; then
	chan_command
fi
